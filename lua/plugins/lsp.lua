--require("mason").setup()
--require("mason-lspconfig").setup()
--
--local luasnip = require 'luasnip'
--local nvim_lsp = require('lspconfig')
--
--local cmp = require 'cmp'
--
--cmp.setup {
--    completion = {
--        autocomplete = false 
--    },
--    snippet = {
--        expand = function(args)
--            require('luasnip').lsp_expand(args.body)
--        end,
--    },
--    mapping = {
--        ['<C-p>'] = cmp.mapping.select_prev_item(),
--        ['<C-n>'] = cmp.mapping.select_next_item(),
--        ['<C-d>'] = cmp.mapping.scroll_docs(-4),
--        ['<C-f>'] = cmp.mapping.scroll_docs(4),
--        ['<C-Space>'] = cmp.mapping.complete(),
--        ['<C-e>'] = cmp.mapping.close(),
--        ['<CR>'] = cmp.mapping.confirm {
--            behavior = cmp.ConfirmBehavior.Replace,
--            select = true,
--        },
--        ['<Tab>'] = function(fallback)
--            if vim.fn.pumvisible() == 1 then
--                vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<C-n>', true, true, true), 'n')
--            elseif luasnip.expand_or_jumpable() then
--                vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<Plug>luasnip-expand-or-jump', true, true,
--                    true), '')
--            else
--                fallback()
--            end
--        end,
--        ['<S-Tab>'] = function(fallback)
--            if vim.fn.pumvisible() == 1 then
--                vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<C-p>', true, true, true), 'n')
--            elseif luasnip.jumpable(-1) then
--                vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<Plug>luasnip-jump-prev', true, true, true),
--                    '')
--            else
--                fallback()
--            end
--        end,
--    },
--    sources = {
--        { name = 'nvim_lsp' },
--        { name = 'buffer' }
--    }
--}
--
--local capabilities = require('cmp_nvim_lsp').default_capabilities()
--
----local navic = require('nvim-navic')
--
---- Use an on_attach function to only map the following keys
---- after the language server attaches to the current buffer
--local on_attach = function(client, bufnr)
--
--    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
--
--    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
--
--    -- navic
--
--    --navic.attach(client, bufnr)
--
--    -- Enable completion triggered by <c-x><c-o>
--    buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
--
--    -- Mappings.
--    local opts = { noremap = true, silent = true }
--
--    -- See `:help vim.lsp.*` for documentation on any of the below functions
--    buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
--    buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
--    buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
--    buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
--    buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
--    buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
--    buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
--    buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
--    buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
--    buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
--    buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
--    buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
--    buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
--    buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
--    buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
--    buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
--    buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.format({async = true})<CR>', opts)
--
--end
--
--nvim_lsp.emmet_ls.setup({
--    on_attach = on_attach,
--    capabilities = capabilities,
--    filetypes = { 'html', 'typescriptreact', 'javascriptreact', 'css', 'sass', 'scss', 'less' },
--    init_options = {
--        html = {
--            options = {
--                -- For possible options, see: https://github.com/emmetio/emmet/blob/master/src/config.ts#L79-L267
--                ["bem.enabled"] = true,
--            },
--        },
--    }
--})
--nvim_lsp.intelephense.setup({
--    settings = {
--        intelephense = {
--            stubs = {
--                "bcmath",
--                "laravel",
--                "bz2",
--                "Core",
--                "curl",
--                "date",
--                "dom",
--                "fileinfo",
--                "filter",
--                "gd",
--                "gettext",
--                "hash",
--                "iconv",
--                "imap",
--                "intl",
--                "json",
--                "libxml",
--                "mbstring",
--                "mcrypt",
--                "mysql",
--                "mysqli",
--                "password",
--                "pcntl",
--                "pcre",
--                "PDO",
--                "pdo_mysql",
--                "Phar",
--                "readline",
--                "regex",
--                "session",
--                "SimpleXML",
--                "sockets",
--                "sodium",
--                "standard",
--                "superglobals",
--                "tokenizer",
--                "xml",
--                "xdebug",
--                "xmlreader",
--                "xmlwriter",
--                "yaml",
--                "zip",
--                "zlib",
--                "wordpress-stubs",
--                "woocommerce-stubs",
--                "acf-pro-stubs",
--                "wordpress-globals",
--                "wp-cli-stubs",
--                "genesis-stubs",
--                "polylang-stubs"
--            },
--            -- environment = {
--            --   includePaths = {'/home/mte90/.composer/vendor/php-stubs/', '/home/mte90/.composer/vendor/wpsyntex/'}
--            -- },
--            files = {
--                maxSize = 5000000;
--            };
--        };
--    },
--    capabilities = capabilities,
--    on_attach = on_attach
--});
--nvim_lsp.cssls.setup {
--    on_attach = on_attach,
--    capabilities = capabilities,
--}
--nvim_lsp.html.setup {
--    on_attach = on_attach,
--    capabilities = capabilities,
--}
--nvim_lsp.tsserver.setup {
--    on_attach = on_attach,
--    capabilities = capabilities,
--}
--nvim_lsp.tailwindcss.setup {
--    on_attach = on_attach,
--    capabilities = capabilities,
--}
--nvim_lsp.csharp_ls.setup {
--    on_attach = on_attach,
--    capabilities = capabilities,
--};
--nvim_lsp.lua_ls.setup {
--    on_attach = on_attach,
--    capabilities = capabilities,
--    settings = {
--        Lua = {
--            runtime = {
--                -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
--                version = 'LuaJIT',
--            },
--            diagnostics = {
--                -- Get the language server to recognize the `vim` global
--                globals = { 'vim' },
--            },
--            workspace = {
--                -- Make the server aware of Neovim runtime files
--                library = vim.api.nvim_get_runtime_file("", true),
--            },
--            -- Do not send telemetry data containing a randomized but unique identifier
--            telemetry = {
--                enable = false,
--            },
--        },
--    },
--};
--nvim_lsp.rust_analyzer.setup({
--    on_attach = on_attach,
--    capabilities = capabilities,
--    settings = {
--        ["rust-analyzer"] = {
--            imports = {
--                granularity = {
--                    group = "module",
--                },
--                prefix = "self",
--            },
--            cargo = {
--                buildScripts = {
--                    enable = true,
--                },
--            },
--            procMacro = {
--                enable = true
--            },
--        }
--    }
--})
--nvim_lsp.clangd.setup{}
